create database main
    with owner admin_user;

create table public.marketplaces
(
    id          integer generated by default as identity,
    name        text,
    logo        text,
    base_url    text,
    src         text,
    last_lookup timestamp
);

alter table public.marketplaces
    owner to admin_user;

create unique index marketplaces_id_uindex
    on public.marketplaces (id);

create table public.sku
(
    uuid                   uuid,
    marketplace_id         integer
        references public.marketplaces (),
    product_id             text,
    title                  text,
    description            text,
    brand                  text,
    seller_id              varchar,
    seller_name            text,
    first_image_url        text,
    category_id            integer,
    category_lvl_1         text,
    category_lvl_2         text,
    category_lvl_3         text,
    category_remaining     text,
    features               jsonb,
    rating_count           integer,
    rating_value           double precision,
    price_before_discounts real,
    discount               double precision,
    price_after_discounts  real,
    bonuses                integer,
    sales                  integer,
    inserted_at            timestamp default now(),
    updated_at             timestamp default now(),
    currency               text,
    referral_url           text,
    barcode                text,
    original_url           text,
    mpn                    text,
    status                 text,
    revenue                double precision,
    images                 text[],
    last_seen_at           timestamp default CURRENT_TIMESTAMP
);

comment on column public.sku.uuid is 'id товара в нашей бд';

comment on column public.sku.marketplace_id is 'id маркетплейса';

comment on column public.sku.product_id is 'id товара в маркетплейсе';

comment on column public.sku.title is 'название товара';

comment on column public.sku.description is 'описание товара';

comment on column public.sku.category_lvl_1 is 'Первая часть категории товара. Например, для товара, находящегося по пути Детям/Электроника/Детская электроника/Игровая консоль/Игровые консоли и игры/Игровые консоли, в это поле запишется "Детям".';

comment on column public.sku.category_lvl_2 is 'Вторая часть категории товара. Например, для товара, находящегося по пути Детям/Электроника/Детская электроника/Игровая консоль/Игровые консоли и игры/Игровые консоли, в это поле запишется "Электроника".';

comment on column public.sku.category_lvl_3 is 'Третья часть категории товара. Например, для товара, находящегося по пути Детям/Электроника/Детская электроника/Игровая консоль/Игровые консоли и игры/Игровые консоли, в это поле запишется "Детская электроника".';

comment on column public.sku.category_remaining is 'Остаток категории товара. Например, для товара, находящегося по пути Детям/Электроника/Детская электроника/Игровая консоль/Игровые консоли и игры/Игровые консоли, в это поле запишется "Игровая консоль/Игровые консоли и игры/Игровые консоли".';

comment on column public.sku.features is 'Характеристики товара';

comment on column public.sku.rating_count is 'Кол-во отзывов о товаре';

comment on column public.sku.rating_value is 'Рейтинг товара (0-5)';

alter table public.sku
    owner to admin_user;

create index sku_category_lvl_1_index
    on public.sku (category_lvl_1);

create index sku_category_lvl_2_index
    on public.sku (category_lvl_2);

create index sku_category_lvl_3_index
    on public.sku (category_lvl_3);

create unique index sku_uuid_uindex
    on public.sku (uuid);

create index sku_brand_index
    on public.sku (brand);

create unique index sku_marketplace_id_sku_id_uindex
    on public.sku (marketplace_id, product_id);

create index sku_features_index
    on public.sku (features);

create table public.golden_sku
(
    uuid               uuid not null
        primary key
        constraint golden_sku_pk
            unique,
    title              text,
    description        text,
    brand              text,
    first_image_url    text,
    category_id        integer,
    category_lvl_1     text,
    category_lvl_2     text,
    category_lvl_3     text,
    category_remaining text,
    features           jsonb,
    inserted_at        timestamp default now(),
    updated_at         timestamp default now(),
    product_id         bigint,
    uploaded_at        timestamp,
    total_revenue      double precision,
    rating             double precision,
    images             text[],
    upload_status      varchar
);

alter table public.golden_sku
    owner to admin_user;

create table public.golden_to_sku
(
    sku_uuid            uuid not null
        constraint golden_to_sku_sku_uuid_fk
            references public.sku (),
    match_source        text,
    matched_at          timestamp default now(),
    verification_status boolean,
    verified_by         text,
    golden_uuid         uuid not null
        constraint golden_to_sku_golden_sku_uuid_fk
            references public.golden_sku,
    match_score         real,
    insales_variant_id  integer,
    verified_at         timestamp
);

comment on column public.golden_to_sku.verification_status is 'True - подтвержденный матч. False - подтвержденный не матч. Null - unknown';

alter table public.golden_to_sku
    owner to admin_user;

create unique index golden_to_sku_sku_uuid_golden_uuid_match_source_uindex
    on public.golden_to_sku (sku_uuid, golden_uuid, match_source);

create index golden_sku_features_index
    on public.golden_sku (features);

create table public.categories
(
    marketplace_category  text not null
        primary key,
    gs_category_lvl_1     text,
    gs_category_lvl_2     text,
    gs_category_lvl_3     text,
    marketplace_id        integer,
    active                boolean default false,
    insales_category_id   integer,
    insales_image         text,
    insales_collection_id integer,
    description           text,
    html_title            text,
    seo_description       text,
    meta_description      text,
    meta_keywords         text
);

alter table public.categories
    owner to admin_user;

create table public.price_history
(
    sku_uuid              uuid,
    price_after_discount  double precision,
    price_before_discount integer,
    discount              double precision,
    sales                 integer,
    revenue               double precision,
    updated_at            timestamp default CURRENT_TIMESTAMP
);

alter table public.price_history
    owner to admin_user;

create table public.goodsale_offers
(
    uuid                   uuid not null
        constraint goodsale_offers_pk
            primary key,
    status                 varchar(255),
    price_before_discounts double precision,
    price_after_discounts  double precision,
    golden_uuid            uuid
        constraint goodsale_offers_pk_2
            unique
        constraint goodsale_offers_golden_sku_uuid_fk
            references public.golden_sku,
    insales_variant_id     integer
);

alter table public.goodsale_offers
    owner to admin_user;

create function public.update_price_history() returns trigger
    language plpgsql
as
$$
BEGIN
    INSERT INTO price_history (
        sku_uuid,
        price_after_discount,
        price_before_discount,
        discount,
        sales,
        revenue,
        updated_at
    )
    VALUES (
        OLD.uuid,
        OLD.price_after_discounts,
        OLD.price_before_discounts,
        OLD.discount,
        OLD.sales,
        OLD.revenue,
        CURRENT_TIMESTAMP
    );
    RETURN NULL;
END;
$$;

alter function public.update_price_history() owner to admin_user;

create trigger trg_update_price_history
    before update
        of price_after_discounts, price_before_discounts
    on public.sku
    for each row
    when (old.price_after_discounts IS DISTINCT FROM new.price_after_discounts OR
          old.price_before_discounts IS DISTINCT FROM new.price_before_discounts)
execute procedure public.update_price_history();
